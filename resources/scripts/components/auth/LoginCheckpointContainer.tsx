import React, { useState } from 'react';
import { Link, RouteComponentProps } from 'react-router-dom';
import loginCheckpoint from '@/api/auth/loginCheckpoint';
import { ActionCreator } from 'easy-peasy';
import { StaticContext } from 'react-router';
import { useFormikContext, withFormik } from 'formik';
import useFlash from '@/plugins/useFlash';
import Field from '@/components/elements/Field';
import Button from '@/components/elements/Button';
import './LoginContainer.css'; // Importar estilos

interface Values {
    code: string;
    recoveryCode: string;
}

type OwnProps = RouteComponentProps<Record<string, string | undefined>, StaticContext, { token?: string }>;

type Props = OwnProps & {
    clearAndAddHttpError: ActionCreator<any>;
};

const LoginCheckpointContainer = () => {
    const { isSubmitting, setFieldValue } = useFormikContext<Values>();
    const [isMissingDevice, setIsMissingDevice] = useState(false);

    return (
        <div className="login-checkpoint-container">
            <div className="form-container">
                <Field
                    light
                    name={isMissingDevice ? 'recoveryCode' : 'code'}
                    title={isMissingDevice ? 'Recovery Code' : 'Authentication Code'}
                    description={
                        isMissingDevice
                            ? 'Enter one of the recovery codes generated when you setup 2-Factor authentication.'
                            : 'Enter the two-factor token generated by your device.'
                    }
                    type="text"
                    autoComplete="one-time-code"
                    autoFocus
                />
                <Button size="xlarge" type="submit" disabled={isSubmitting} isLoading={isSubmitting}>
                    Continue
                </Button>
                <span
                    onClick={() => {
                        setFieldValue('code', '');
                        setFieldValue('recoveryCode', '');
                        setIsMissingDevice((prev) => !prev);
                    }}
                    className="toggle-device-link"
                >
                    {isMissingDevice ? 'I Have My Device' : "I've Lost My Device"}
                </span>
                <Link to="/auth/login" className="return-login-link">
                    Return to Login
                </Link>
            </div>
        </div>
    );
};

const EnhancedForm = withFormik<Props, Values>({
    handleSubmit: ({ code, recoveryCode }, { setSubmitting, props: { clearAndAddHttpError, location } }) => {
        loginCheckpoint(location.state?.token || '', code, recoveryCode)
            .then((response) => {
                if (response.complete) {
                    window.location.href = response.intended || '/';
                    return;
                }
                setSubmitting(false);
            })
            .catch((error) => {
                console.error(error);
                setSubmitting(false);
                clearAndAddHttpError({ error });
            });
    },
    mapPropsToValues: () => ({ code: '', recoveryCode: '' }),
})(LoginCheckpointContainer);

export default ({ history, location, ...props }: OwnProps) => {
    const { clearAndAddHttpError } = useFlash();

    if (!location.state?.token) {
        history.replace('/auth/login');
        return null;
    }

    return <EnhancedForm clearAndAddHttpError={clearAndAddHttpError} history={history} location={location} {...props} />;
};
